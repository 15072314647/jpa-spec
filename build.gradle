plugins {
    id 'com.gradle.build-scan' version '1.9'
    id "com.jfrog.bintray" version "1.7.3"
    id "org.owasp.dependencycheck" version "1.4.3"
    id 'com.github.kt3k.coveralls' version '2.7.1'
    id 'java-library'
    id 'idea'
    id 'net.ltgt.apt' version '0.10'
    id 'maven'
    id 'maven-publish'
    id 'signing'
    id "com.bmuschko.clover" version "2.2.1"
}

buildScan {
    licenseAgreementUrl = 'https://gradle.com/terms-of-service'
    licenseAgree = 'yes'
}

repositories {
    jcenter()
}

group = 'com.github.wenhao'
version = '3.1.1'

idea {
    project {
        vcs = 'Git'
    }
    module {
        jdkName = '1.8'
    }
}

dependencies {
    implementation("org.springframework.data:spring-data-jpa:$springDataJpaVersion")
    implementation("org.hibernate.javax.persistence:hibernate-jpa-2.1-api:$jpaVersion")

    testImplementation("org.springframework.boot:spring-boot-starter-data-jpa:$springBootVersion")
    testImplementation("org.springframework.boot:spring-boot-starter-test:$springBootVersion")
    testImplementation("org.apache.commons:commons-lang3:$commonsLang3Version")
    testImplementation("com.h2database:h2:$h2Version")
    testImplementation("junit:junit:$junitVersion")

    clover 'org.openclover:clover:4.2.0'

    task sourcesJar(type: Jar) {
        from sourceSets.main.allSource
        classifier = 'sources'
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }

    artifacts {
        archives jar
        archives sourcesJar
        archives javadocJar
    }

    ext.isReleaseVersion = !version.endsWith("SNAPSHOT")

    signing {
        required { isReleaseVersion && gradle.taskGraph.hasTask("uploadArchives") }
        sign configurations.archives
    }
}

configurations.all {
    resolutionStrategy.force "org.springframework:spring-orm:$springOrmVersion"
}

clover {
    targetPercentage = '90%'

    report {
        html = true

        testResultsDir = project.tasks.getByName('test').reports.junitXml.destination
        testResultsInclude = 'TEST-*.xml'

        columns {
            coveredMethods format: 'longbar', min: '75'
            coveredStatements format: '%'
            coveredBranches format: 'raw'
            totalPercentageCovered format: '%', scope: 'package'
        }

        historical {
            enabled = true
            historyIncludes = 'clover-*.xml.gz'
            packageFilter = null
            from = null
            to = null

            added {
                range = 10
                interval = '3 weeks'
            }
            mover {
                threshold = 1
                range = 10
                interval = '3 weeks'
            }
            mover {
                threshold = 1
                range = 10
                interval = '3 months'
            }
            mover {
                threshold = 1
                range = 10
                interval = '1 year'
            }
        }
    }
}

def pomConfig = {
    licenses {
        license {
            name 'The Apache Software License, Version 2.0'
            url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
            distribution 'repo'
        }
    }

    scm {
        url 'https://github.com/wenhao/jpa-spec'
        connection 'https://github.com/wenhao/jpa-spec.git'
        developerConnection 'git@github.com:wenhao/jpa-spec.git'
    }

    developers {
        developer {
            id 'wenhao'
            name 'Hao Wen'
            email 'wenhao@126.com'
            organization 'Hao Wen'
            roles {
                role 'Developer'
            }
        }
    }

}

publishing {
    publications {
        maven(MavenPublication) {
            from components.java
            artifact sourcesJar
            artifact javadocJar
            groupId 'com.github.wenhao'
            artifactId 'jpa-spec'
            version '3.1.1'
            pom.withXml {
                def root = asNode()
                root.appendNode('description', 'A JAP Query By Specification framework.')
                root.appendNode('name', 'jpa-spec')
                root.appendNode('url', 'https://github.com/wenhao/jpa-spec')
                root.appendNode('inceptionYear', '2016')
                root.children().last() + pomConfig
            }
        }
    }
}

// publish to jcenter
bintray {
    user = project.hasProperty('bintrayUser') ? project.property('bintrayUser') : System.getenv('BINTRAY_USER')
    key = project.hasProperty('bintrayApiKey') ? project.property('bintrayApiKey') : System.getenv('BINTRAY_API_KEY')
    configurations = ['archives']
    publications = ['maven']
    dryRun = false
    publish = true
    override = false
    pkg {
        repo = 'maven'
        name = 'jpa-spec'
        desc = 'A JAP Query By Specification framework'
        licenses = ['Apache-2.0']
        websiteUrl = 'https://github.com/wenhao/jpa-spec'
        issueTrackerUrl = 'https://github.com/wenhao/jpa-spec/issues'
        vcsUrl = 'https://github.com/wenhao/jpa-spec'
        labels = ['jpa', 'spring-data']
        publicDownloadNumbers = true
        githubRepo = 'wenhao/jpa-spec'
        githubReleaseNotesFile = 'README.md'
        version {
            name = '3.1.1'
            desc = 'A JAP Query By Specification framework 3.1.1'
            released = new Date()
            vcsTag = '3.1.1'
            gpg {
                sign = true
                passphrase = 'passphrase'
            }
            mavenCentralSync {
                sync = true
                user = project.hasProperty('sonatypeUsername')
                password = project.hasProperty('sonatypePassword')
                close = '1'
            }
        }
    }
}

wrapper {
    gradleVersion = '4.7'
}